# -*- coding: utf-8 -*-
"""Juego el Robaíto - Inteligencia Artificial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16v0kKkr_LZVuSDlM7HCoVCGOMBacalUt
"""

class Baraja():

  def __init__(self, tipo, lista_de_cartas):
    # print("Objeto creado")
    self.tipo = tipo
    self.lista_de_cartas = lista_de_cartas
    self.num_de_cartas = len(lista_de_cartas)
    self.quedan_cartas_en_la_baraja = False

  def obtenerDigitosDeCartas(self):
    lista_digitos = []
    for i in self.lista_de_cartas:
      digito = i[0]
      lista_digitos.append(digito)
    return lista_digitos

  def ponerBarajaEnLaMesa(self):
    digitos = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
    simbolos = [chr(9829),  chr(9830), chr(9827), chr(9824)]

    self.lista_de_cartas = [var1 + var2 for var1 in digitos for var2 in simbolos]


# l = []
# t = "Inglesa"
# baraja = Baraja(t, l)
# baraja.ponerBarajaEnLaMesa()
# list = baraja.lista_de_cartas
# print(list)

import random

# { by Mario

class MesaDeJuego:
    def __init__(self, tipo, lista_de_cartas):
        self.cartas_en_la_mesa = []
        self.hay_cartas_en_la_mesa = True
        self.estado_del_juego = ""
        self.obj_baraja = Baraja(tipo, lista_de_cartas)

    def ponerCartasEnLaMesa(self):

      if (len(self.cartas_en_la_mesa) > 0):
        return
      cartas_baraja = self.obj_baraja.lista_de_cartas
      for i in range (0, 4):
        indice = random.randint(0, len(cartas_baraja) - 1)
        carta_tomada = cartas_baraja[indice]
        self.cartas_en_la_mesa.append(carta_tomada)
        self.obj_baraja.lista_de_cartas.remove(carta_tomada)
        cartas_baraja = self.obj_baraja.lista_de_cartas
      self.hay_cartas_en_la_mesa = True

    def quitarCartaDeLaMesa(self, carta_sacrificio):
      letra = carta_sacrificio[0]
      for i in self.cartas_en_la_mesa:
        if(letra in i):
          self.cartas_en_la_mesa.remove(i)

    # def generarMano(self):
    #     carta = ""
    #     for i in range (0, 4):
    #       num_cartas_baraja = len(self.obj_mesa.obj_baraja.lista_de_cartas)
    #       indice = random.randint(0, num_cartas_baraja)
    #       indice = 20
    #       carta = self.obj_mesa.obj_baraja.lista_de_cartas[indice]
    #       # print(carta)
    #       self.obj_jugadores[1].mano.append(carta)
    #       print(jugador.mano)
    #       self.obj_mesa.obj_baraja.lista_de_cartas.remove(carta)



# } by Mario


lc = ["3d", "5c", "4t", "10d"]
t = "Inglesa"

b = [3, 5, 6, 44, 77, 4, 18, 62]
mesa = MesaDeJuego(t, lc)
mesa.ponerCartasEnLaMesa()
print(mesa.cartas_en_la_mesa)
mesa.quitarCartaDeLaMesa("4c")
print(mesa.cartas_en_la_mesa)

#by Juan Carlos {

class Jugador():
    def __init__(self, nombre, mano):
        self.nombre = nombre
        self.mano = mano
        self.mano_len = len(mano)
        self.num_victorias = 0
        self.num_derrotas = 0
        self.paquete_cartas_robadas = []
        self.paq_cartas_robadaslen = 0
        self.num_paquetes_robados = 0
        self.ultima_carta_robada = ""
        self.es_mi_turno = True
        self.num_cartas_robadas = 0


    def establecerJugadorContrario(self, jugadores):
       jugador_contrario = jugadores[1]
       if (jugadores[1].es_mi_turno):
        jugador_contrario = jugadores[0]

       return jugador_contrario

    def robar_carta(self, carta_robada):
        self.paquete_cartas_robadas.append(carta_robada)
        self.mano.remove(carta_robada)
        self.paq_cartas_robadaslen = len(self.paquete_cartas_robadas)
        self.mano_len = len(self.mano)

        self.num_cartas_robadas += 1
        self.ultima_carta_robada = carta_robada


    def robarPaquete(self, jugador, jugador_contrario):
      carta_contraria = jugador_contrario.ultima_carta_robada
      # print(carta_contraria)
      mi_mano = jugador.mano

      for i in mi_mano:
        letra = i[0]
        if (letra in carta_contraria):
          jugador.num_paquetes_robados += 1
          jugador.paquete_cartas_robadas += jugador_contrario.paquete_cartas_robadas
          jugador.paq_cartas_robadaslen = len(jugador.paquete_cartas_robadas)
          jugador.ultima_carta_robada = carta_contraria
          jugador_contrario.ultima_carta_robada = ""
          jugador_contrario.paquete_cartas_robadas = []
          break


    def tirarCarta(self, carta_tirada):
        if (carta_tirada not in self.mano):
          print("La carta no está en tu mano.")
          return
        self._mano.remove(carta_tirada)

        self.mano_len = len(self.mano)

    # def quitarCartaDeLaMano(self, carta, jugador, jugador_c):
    #   jugador.mano.remove(carta)


 # } by Juan Carlos


# by Dariel {

    def elegirCarta(self, entrada, jugador, jugador_c, cartas_mesa):
        if (not jugador.mano):
            print("No tienes cartas en tu mano.")
            return None


        while True:
          print("Cartas en tu mano:")
          for i, carta in enumerate(jugador.mano):
            print(f"{i + 1}: {carta}")
          try:
              indice_carta = int(input("Elige el número correspondiente con la carta que deseas jugar: ") )
              print("")
              carta_elegida = jugador.mano[indice_carta - 1]
              # print(carta_elegida)
              letra = carta_elegida[0]
              if (entrada == 1):
                for i in cartas_mesa:
                  print(letra in i)
                  if (letra in i):
                      # print(f"{letra} en {i}?")

                      return carta_elegida
                  else:
                    print(f"Error: El valor de la carta seleccionada no se encuentra en el grupo de cartas en la mesa.")
                    print("")
                    break
              elif(entrada == 2):
                ultima_carta_rc = jugador_c.ultima_carta_robada

                if(letra in ultima_carta_rc):
                    return carta_elegida
                else:
                  print(f"Error: La carta seleccionada no tiene el mismo valor que la ultima carta robada de {jugador_c.nombre}.")
                  print("")
                  break
              elif (entrada == 3):
                if 0 <= indice_carta < len(self.mano):
                      return carta_elegida
          except ValueError:
              print("Error: Por favor, ingresa un número válido.")
              print("")
# } by Dariel

import random
#by Adonis {

class Juego:

    def __init__(self, jugadores, tipo, lista_de_cartas):
        self.tipo = tipo = "Robaíto"
        self.jugadores = jugadores
        self.obj_mesa = MesaDeJuego(tipo, lista_de_cartas)
        self.num_rondas = 0
        self.lista_opciones = []


    def esUnaAccionValida(self, entrada, jugador, jugador_contrario):
      esValida = False
      mano = jugador.mano

      if (entrada == 1):
        cartas_en_la_mesa = self.obj_mesa.cartas_en_la_mesa
        for x in cartas_en_la_mesa:
          letra = x[0]
          for i in mano:
            if (letra in i):
              esValida = True

      elif (entrada == 2):
        ultima_carta_robada = jugador_contrario.ultima_carta_robada
        for i in mano:
          letra = i[0]
          if (letra in ultima_carta_robada and ultima_carta_robada):
            esValida = True
      return esValida


    def repartirCartas(self):

        if (len(self.obj_mesa.obj_baraja.lista_de_cartas) == 0):
          return
        # carta = ""
        for i in range (0, 8):

          num_cartas_baraja = len(self.obj_mesa.obj_baraja.lista_de_cartas)
          # print(num_cartas_baraja)
          indice = random.randint(0, num_cartas_baraja - 1)
          carta = self.obj_mesa.obj_baraja.lista_de_cartas[indice]
          # print(carta)
          self.obj_mesa.obj_baraja.lista_de_cartas.remove(carta)
          if (i > 3):
            self.jugadores[1].mano.append(carta)
          else:
            self.jugadores[0].mano.append(carta)


    def obtenerCartaARobar(self, opcion, carta_sacrificio):
      jugador_contrario = self.jugadores[0]

      if (jugador_contrario.es_mi_turno):
        jugador_contrario = self.jugadores[1]

      if (opcion == 1):
        cartas_en_la_mesa = self.obj_mesa.cartas_en_la_mesa
        for i in cartas_en_la_mesa:
          letra = carta_sacrificio[0]
          if (letra in i):
            return i
      elif (opcion == 2):
        return jugador_contrario.ultima_carta_robada
      else:
        return ""



# } by Adonis

# by Mario {
    def mostrar_estado_del_juego(self, jugador, jugador_contrario):

      nombrej = jugador.nombre
      nombrec = jugador_contrario.nombre
      manoj = jugador.mano ####
      manoc = jugador_contrario.mano
      cartas_robadasj = jugador.paquete_cartas_robadas if len(jugador.paquete_cartas_robadas) > 0 else 0
      cartas_robadasc = jugador_contrario.paquete_cartas_robadas if len(jugador_contrario.paquete_cartas_robadas) > 0 else 0
      num_cartas_robadasj = len(jugador.paquete_cartas_robadas)
      num_cartas_robadasc = len(jugador_contrario.paquete_cartas_robadas)
      ultima_carta_robadaj = cartas_robadasj[num_cartas_robadasj - 1] if num_cartas_robadasj > 0 else ""
      ultima_carta_robadac = cartas_robadasc[num_cartas_robadasc - 1] if num_cartas_robadasc > 0 else ""
      num_cartas_en_baraja = len(self.obj_mesa.obj_baraja.lista_de_cartas)
      cartas_en_la_mesa = self.obj_mesa.cartas_en_la_mesa
      str1 = f"**{nombrej}: {manoj}     Paquete de cartas: {ultima_carta_robadaj}      Cartas robadas: {num_cartas_robadasj}"
      str2 = f"**{nombrec}: {manoc}    Paquete de cartas: {ultima_carta_robadac}      Cartas robadas: {num_cartas_robadasc}"
      str3 = f"Ronda: {self.num_rondas}   Turno: {nombrej}     "
      str4 = f"Cartas en la baraja: {num_cartas_en_baraja}"
      print("---------------------------------------------------------")
      # print(f"Ronda: {self.num_rondas}")
      #
      # print(f"Cartas robadas: {len(cartas_robadasj)}")
      # print(f"Mano: {mano}")
      # print(f"Última carta robada de {nombrec}: {jugador_contrario.ultima_carta_robada}")
      # print(f"Cartas en la mesa: {juego.obj_mesa.cartas_en_la_mesa}")
      print(str3)
      print("")
      print(str4)
      print("")
      print(str1)
      print("")
      print(str2)
      print("")
      print(f"             Cartas en la mesa: **{juego.obj_mesa.cartas_en_la_mesa}**")
      print("")
# } by Mario

# by Alexander{

    # def imprimirOpciones(self):
    #   for i in self.lista_opciones:
    #     print(i)

    def cargarOpciones(self):
      opcion1 = "Robar carta de la mesa"
      opcion2 = "Robar paquete de cartas "
      opcion3 = "Tirar carta a la mesa"
      opcion4 = "Salir del juego"
      self.lista_opciones = [opcion1, opcion2, opcion3, opcion4]

    # def eliminarOpcion(self, opcion):
    #   if (opcion in self.lista_opciones):
    #     self.lista_opciones.remove(opcion)

    def jugar(self):
      indice = 0
      contador = 0
      self.cargarOpciones()
      self.obj_mesa.ponerCartasEnLaMesa()
      jugador = ""
      jugador_contrario = ""
      while True:
        contador += 1
        num_cartas_en_baraja = len(self.obj_mesa.obj_baraja.lista_de_cartas)
        jugador = self.jugadores[indice]
        jugador_contrario = self.jugadores[1] if indice == 0 else self.jugadores[0]
        mano1_len = len(jugador.mano)
        mano2_len = len(jugador_contrario.mano)
        if (mano1_len == 0 and mano2_len == 0):
          self.repartirCartas()
          if ( (contador % 2) != 0):
            self.num_rondas += 1

          val = self.obj_mesa.obj_baraja.num_de_cartas
          if (val == 0):
            jugador1 = jugador.nombre
            jugador2 = jugador_contrario.nombre
            paquete_len_jcontrario = jugador_contrario.paq_cartas_robadaslen
            paquete_len_jugador = jugador.paq_cartas_robadaslen
            print("----Juego finalizado----")
            print(jugador1 + ": " + str(paquete_len_jugador) + " cartas robadas")
            print(jugador1 + ": " + str(paquete_len_jcontrario) + " cartas robadas")
            if (paquete_len_jugador > paquete_len_jcontrario):
              print("El ganador es " + jugador1)
              break
            elif (paquete_len_jugador < paquete_len_jcontrario):
              print("El ganador es " + jugador2)
              break
            else:
              print("¡El resultado es un empate!")
              break
        while True:
          cm = self.obj_mesa.cartas_en_la_mesa
          self.mostrar_estado_del_juego(jugador, jugador_contrario)
          for i, opcion in enumerate(self.lista_opciones):
            print(f"{i + 1}: {opcion}")
          try:
            entrada = int(input("Elige el número correspondiente con la acción a realizar: "))
            print("")
            if (entrada == 1):
              if ( self.esUnaAccionValida(entrada, jugador, jugador_contrario) == False ):
                print("Error: No tiene cartas de igual valor a las cartas de la mesa. Intentelo de nuevo")
                print("")
                continue
              carta_sacrificio = jugador.elegirCarta(entrada, jugador, jugador_contrario, cm)
              jugador.paquete_cartas_robadas.append(carta_sacrificio)
              jugador.robar_carta(carta_sacrificio)
              self.obj_mesa.quitarCartaDeLaMesa(carta_sacrificio)
              print("")
              break
            elif (entrada == 2):
              if ( self.esUnaAccionValida(entrada, jugador, jugador_contrario) == False ):
                  print(f"Error: No tiene cartas de igual valor a la ultima carta robada por {jugador_contrario.nombre}. Intentelo de nuevo")
                  print("")
                  continue
              carta_sacrificio = jugador.elegirCarta(entrada, jugador, jugador_contrario, cm)
              jugador.robarPaquete(jugador, jugador_contrario)
              jugador.mano.remove(carta_sacrificio)
              print("")
              break
            elif (entrada == 3):
              carta_sacrificio = jugador.elegirCarta(entrada, jugador, jugador_contrario, cm)
              jugador.mano.remove(carta_sacrificio)
              self.obj_mesa.cartas_en_la_mesa.append(carta_sacrificio)
              print("")
              break
            elif (entrada == 4):
              return
          except ValueError:
            print("Error: Solo se pueden ingresar números válidos. Intente de nuevo.")
        if (indice == 0):
          indice = 1
        else:
          indice = 0
        print(indice)
        # if ( mano1_len == 0 and mano2_len == 0 ):

# } by Alexander


t = "Inglesa"

digitos = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']
simbolos = [chr(9829),  chr(9830), chr(9827), chr(9824)]

l = [var1 + var2 for var1 in digitos for var2 in simbolos]
# lista2 = ['A', '2', '3']
# lista3 = ['5', 'J', '7']

lista2 = []
lista3 = []


p1 = Jugador("Pablo", lista2)
p2 = Jugador("Saulo", lista3)
# p2.ultima_carta_robada = "AD"
listJug = [p1, p2]
juego = Juego(listJug, t, l)
# juego.obj_mesa.cartas_en_la_mesa = ["3E", "2C", "4T"]
juego.jugar()

# mano1 = juego.jugadores[0].mano
# mano2 = juego.jugadores[1].mano
# print(mano1)
# print(mano2)

for i in range(0, 8):
  print(i)